{"version":3,"sources":["../../../projects/notify/src/lib/libconfig.ts","../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["LibConfigService","InjectionToken","NotifyContainerComponent","prototype","ngOnInit","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵproperty","NotifyComponent","NotifyService","renderer","this","type","progressrequired","progressTime","actualTime","destroy","EventEmitter","setWidth","_this","myVar","setTimeout","onClose","ngAfterContentInit","setWidthMethod","mySubscription","interval","subscribe","x","setProgress","unsubscribe","clearTimeout","emit","i0","ɵɵdirectiveInject","Renderer2","inputs","header","message","outputs","consts","i0.ɵɵtext","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵtextInterpolate","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","config","maxLimit","countNotifications","Queue","Array","_children","NotifyContainerRef","NotifyContainerElement","libConfig","appendComponentToContainer","childComponentRef","childElement","defineComponentValues","push","instance","open","category","length","shift","destroyAll","forEach","cmp","insertTimeOut","timeOut","sub","timeOutRequiredCategories","includes","Inject","NotifyModule","forRoot","ngModule","providers","provide","useValue","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nexport interface libconfig {\n    timeOut: number;\n    timeOutRequiredCategories: Array<string>;\n    maxLimit: number;\n}\n\nexport const LibConfigService = new InjectionToken<libconfig>('libconfig');\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<ng-content></ng-content>","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [ngClass]=\"type\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col-2\">\n                <a type=\"button\" (click)=\"onClose()\">X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n    <div *ngIf=\"progressrequired\" class=\"progress\">\n        <div #progressDiv [style.width.%]=\"setWidth\" [ngClass]=\"{\n            'bg-warning': type === 'warning',\n            'bg-danger': type === 'error'\n          }\" class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n\n        </div>\n    </div>\n</div>","import { AfterContentInit, AfterViewInit, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { interval, Subscription } from 'rxjs';\nimport 'rxjs/add/observable/interval';\nimport { NotifyService } from './notify.service';\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit, AfterContentInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Input() progressrequired = false;\n  @Input() progressTime = 0;\n  @Input() actualTime = 0;\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n  mySubscription: Subscription;\n  myVar;\n  setWidth = 0;\n  constructor(private NotifyService: NotifyService, public renderer: Renderer2) {\n\n  }\n\n  ngOnInit(): void {\n    if (this.progressrequired){\n    this.myVar = setTimeout(() => {\n        this.onClose();\n    }, this.progressTime + 500);\n  }\n  }\n\n  ngAfterContentInit() {\n    if (this.progressrequired) {\n      this.setWidthMethod();\n      this.mySubscription = interval(100).subscribe((x => {\n        this.setProgress();\n      }));\n    }\n\n  }\n  \n\n  onClose(): void {\n    if (this.progressrequired) {\n    this.mySubscription.unsubscribe();\n    clearTimeout(this.myVar);\n    }\n    this.destroy.emit();\n  }\n\n  setProgress() {\n    if (this.actualTime > 0) {\n      this.actualTime = this.actualTime - ((this.progressTime)/100);\n      this.setWidthMethod();\n    }\n    else {\n      this.mySubscription.unsubscribe();\n    }\n  }\n\n  setWidthMethod()\n  {\n    this.setWidth = ((this.actualTime / this.progressTime) * 100);\n  }\n}\n","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef, Inject } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\n\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { libconfig, LibConfigService } from './libconfig';\nimport { INotification } from './notification.interface';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n  private libConfig: libconfig;\n  maxLimit = 0;\n  countNotifications = 0;\n  Queue = Array<INotification>();\n  private _children: NotifyComponent[] = [];\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef, @Inject(LibConfigService) private config) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n    this.libConfig = this.config;\n    this.maxLimit = this.libConfig.maxLimit;\n  }\n\n\n  private appendComponentToContainer(header: string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    this.defineComponentValues(childComponentRef,header,message,type);\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n    this._children.push(childComponentRef.instance);\n    this.countNotifications++;\n\n  \n  }\n\n  open(header, message, category) {\n    if (this.countNotifications < this.maxLimit) {\n      this.appendComponentToContainer(header, message, category);\n    }\n    else {\n      this.Queue.push({ header: header, message: message, type: category });\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>) {\n    this.elementService.destroyElement(childComponentRef);\n    if (this.countNotifications > 0) {\n      this.countNotifications--;\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer(this.Queue[0].header, this.Queue[0].message, this.Queue[0].type);\n        this.Queue.shift();\n      }\n    }\n  }\n\n\n  destroyAll() {\n    this.Queue = [];\n    this._children.forEach(cmp => {\n      cmp.onClose();\n    });\n    this._children = [];\n    this.countNotifications = 0;\n    \n  }\n\n  insertTimeOut(childComponentRef: ComponentRef<any>){\n    childComponentRef.instance.progressrequired = true;\n    childComponentRef.instance.progressTime = this.libConfig.timeOut;\n    childComponentRef.instance.actualTime =  this.libConfig.timeOut;\n  }\n\n\n  defineComponentValues(childComponentRef: ComponentRef<any>, header, message, type)\n  {\n    childComponentRef.instance.header = header;\n    childComponentRef.instance.message = message;\n    childComponentRef.instance.type = type;\n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef);\n    });\n\n    if (this.libConfig.timeOutRequiredCategories.includes(type)) {  \n      this.insertTimeOut(childComponentRef);\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { libconfig, LibConfigService } from './libconfig';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n  // providers: [ { provide: APP_CONFIG, useValue: AppConfig }]\n})\nexport class NotifyModule { \n    public static forRoot(config: libconfig): ModuleWithProviders<NotifyModule> {\n\n      return {\n          ngModule: NotifyModule,\n          providers: [\n              {\n                  provide: LibConfigService,\n                  useValue: config\n              }\n          ]\n      };\n  }\n}\n\n"]}