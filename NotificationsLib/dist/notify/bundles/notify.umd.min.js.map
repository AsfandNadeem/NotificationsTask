{"version":3,"sources":["../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["NotifyContainerComponent","prototype","ngOnInit","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","NotifyComponent","NotifyService","this","type","destroy","EventEmitter","getBackground","onClose","emit","i0","ɵɵdirectiveInject","inputs","header","message","outputs","consts","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","maxLimit","Queue","Array","_children","NotifyContainerRef","NotifyContainerElement","appendComponentToContainer","_this","childComponentRef","childElement","instance","sub","subscribe","unsubscribe","push","setTimeout","open","category","splice","indexOf","length","shift","destroyAll","forEach","cmp","NotifyModule","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<ng-content id=\"parent\"></ng-content>","import { HostBinding, Input } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { NotifyService } from './notify.service';\n\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n\n  notifref: NotifyComponent;\n  // @HostBinding('class.redbackground') warning: boolean;\n  constructor(private NotifyService: NotifyService) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  // isWarning(): boolean {\n  //   if (this.type === 'warning') {\n  //     return true;\n  //   }\n  //   else {\n  //     return false;\n  //   }\n\n  // }\n\n  getBackground(): string {\n    if (this.type === 'warning') {\n      return 'orange';\n    }\n    else if (this.type == 'error') {\n      return 'red'\n    }\n    else {\n      return 'blue';\n    }\n  }\n\n  onClose(): void {\n    this.destroy.emit();\n  }\n}\n","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [style.backgroundColor]=\"getBackground()\">\n        <div class=\"row\">\n            <div class=\"col\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col\">\n                <a type=\"button\" (click)=\"onClose()\" >X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n</div>","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { INotification } from './notification.interface';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n\n  maxLimit = 1;\n  Queue = Array<INotification>();\n  private _children:ComponentRef<NotifyComponent>[] = [];\n\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n  }\n\n\n  private appendComponentToContainer(header: string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    childComponentRef.instance.header = header;\n\n    childComponentRef.instance.message = message;\n\n    childComponentRef.instance.type = type;\n\n\n    \n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef);\n    });\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n    this._children.push(childComponentRef);\n\n\n    if (type == \"info\") {\n      setTimeout(() => {\n        if(childComponentRef)\n        {this.destroy(childComponentRef);}\n      }, 10000);\n    }\n  }\n\n  open(header, message, category) {\n    if (this.maxLimit < 5) {\n      this.appendComponentToContainer(header, message + this.maxLimit, category);\n      this.maxLimit++;\n    }\n    else {\n      this.Queue.push({header:header,message:message, type:category});\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>) {\n    this.elementService.destroyElement(childComponentRef);\n    (this._children).splice((this._children).indexOf(childComponentRef), 1);\n    if (this.maxLimit > 0) {\n      this.maxLimit--;\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer(this.Queue[0].header, this.Queue[0].message, this.Queue[0].type);\n        this.Queue.shift();\n      }\n    }\n  }\n\n\n  destroyAll()\n  {\n    this._children.forEach(cmp=>cmp.destroy());\n    this._children.splice(0,this._children.length);\n  }\n\n\n\n\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n})\nexport class NotifyModule { }\n"]}