{"version":3,"sources":["../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["NotifyContainerComponent","prototype","ngOnInit","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","NotifyComponent","NotifyService","renderer","this","type","progressrequired","progressTime","actualTime","destroy","EventEmitter","setWidth","exists","_this","setTimeout","onClose","ngAfterContentInit","mySubscription","interval","subscribe","x","setProgress","getBackground","unsubscribe","emit","i0","ɵɵdirectiveInject","Renderer2","inputs","header","message","outputs","consts","i0.ɵɵtext","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵtextInterpolate","i0.ɵɵproperty","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","maxLimit","countNotifications","Queue","Array","_children","NotifyContainerRef","NotifyContainerElement","appendComponentToContainer","childComponentRef","childElement","instance","sub","push","open","category","length","shift","destroyAll","forEach","cmp","NotifyModule","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [style.backgroundColor]=\"getBackground()\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col-2\">\n                <a type=\"button\" (click)=\"onClose()\">X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\" style=\"text-align: center;\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n    <div *ngIf=\"progressrequired\" class=\"progress\">\n        <div #progressDiv [style.width.%]=\"setWidth\" class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n\n        </div>\n    </div>\n</div>","<ng-content></ng-content>","import { AfterContentInit, AfterViewInit, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { interval, Subscription } from 'rxjs';\nimport 'rxjs/add/observable/interval';\nimport { NotifyService } from './notify.service';\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit, AfterContentInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Input() progressrequired = false;\n  @Input() progressTime = 0;\n  @Input() actualTime = 0;\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n  mySubscription: Subscription;\n  // @ViewChild('progressDiv') divCurtain: ElementRef;\n  setWidth = 0;\n  exists = true;\n\n  // @HostBinding('class.redbackground') warning: boolean;\n  constructor(private NotifyService: NotifyService, public renderer: Renderer2) {\n\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => {\n      if (this.type == \"info\" && this.exists) {\n        this.onClose();\n      }\n    }, 10500);\n  }\n\n  ngAfterContentInit() {\n    if (this.progressrequired) {\n      this.setWidth = ((this.actualTime / this.progressTime) * 100);\n      this.mySubscription = interval(100).subscribe((x => {\n        this.setProgress();\n      }));\n    }\n\n  }\n\n  getBackground(): string {\n    if (this.type === 'warning') {\n      return 'darkorange';\n    }\n    else if (this.type == 'error') {\n      return 'red'\n    }\n    else {\n      return 'blue';\n    }\n  }\n\n  onClose(): void {\n    if (this.progressrequired) {\n    this.mySubscription.unsubscribe();\n    }\n    this.destroy.emit();\n  }\n\n  setProgress() {\n    if (this.actualTime > 0) {\n      this.actualTime = this.actualTime - 100;\n      this.setWidth = ((this.actualTime / this.progressTime) * 100);\n      \n      // this.divCurtain.nativeElement.style.width = (this.actualTime / this.progressTime).toString() + '%';\n    }\n    else {\n      this.mySubscription.unsubscribe();\n    }\n  }\n}\n","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { INotification } from './notification.interface';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n  maxLimit = 5;\n  countNotifications = 0;\n  Queue = Array<INotification>();\n  private _children: NotifyComponent[] = [];\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n  }\n\n\n  private appendComponentToContainer(header: string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    childComponentRef.instance.header = header;\n\n    childComponentRef.instance.message = message;\n\n    childComponentRef.instance.type = type;\n\n    childComponentRef.instance.exists = true;\n\n\n\n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef);\n    });\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n    this._children.push(childComponentRef.instance);\n    this.countNotifications++;\n\n    if (type == \"info\") {\n      childComponentRef.instance.exists = true;\n      childComponentRef.instance.progressrequired = true;\n      childComponentRef.instance.progressTime = 10000;\n      childComponentRef.instance.actualTime = 10000;   \n    }\n  }\n\n  open(header, message, category) {\n    if (this.countNotifications < this.maxLimit) {\n      this.appendComponentToContainer(header, message, category);\n    }\n    else {\n      this.Queue.push({ header: header, message: message, type: category });\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>) {\n    this.elementService.destroyElement(childComponentRef);\n    // (this._children).splice((this._children).indexOf(childComponentRef.instance), 1);\n    \n    if (childComponentRef.instance.exists) {\n      childComponentRef.instance.exists = false;\n    }\n    if (this.countNotifications > 0) {\n      this.countNotifications--;\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer(this.Queue[0].header, this.Queue[0].message, this.Queue[0].type);\n        this.Queue.shift();\n      }\n    }\n  }\n\n\n  destroyAll() {\n    this.Queue = [];\n    this._children.forEach(cmp => {\n      cmp.onClose();\n    });\n    this._children = [];\n    this.countNotifications = 0;\n    \n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n})\nexport class NotifyModule { }\n"]}