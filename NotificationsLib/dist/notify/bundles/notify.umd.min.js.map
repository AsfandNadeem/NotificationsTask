{"version":3,"sources":["../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["NotifyContainerComponent","prototype","ngOnInit","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","NotifyComponent","NotifyService","this","type","destroy","EventEmitter","getBackground","onClose","emit","i0","ɵɵdirectiveInject","inputs","header","message","outputs","consts","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","maxLimit","Queue","NotifyContainerRef","NotifyContainerElement","appendComponentToContainer","_this","childComponentRef","childElement","instance","sub","subscribe","unsubscribe","open","category","console","log","push","length","shift","NotifyModule","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<ng-content id=\"parent\"></ng-content>","import { HostBinding, Input } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { NotifyService } from './notify.service';\n\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n\n  notifref: NotifyComponent;\n  // @HostBinding('class.redbackground') warning: boolean;\n  constructor(private NotifyService: NotifyService) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  // isWarning(): boolean {\n  //   if (this.type === 'warning') {\n  //     return true;\n  //   }\n  //   else {\n  //     return false;\n  //   }\n\n  // }\n\n  getBackground(): string {\n    if (this.type === 'warning') {\n      return 'orange';\n    }\n    else if (this.type == 'error') {\n      return 'red'\n    }\n    else {\n      return 'blue';\n    }\n  }\n\n  onClose(): void {\n    this.destroy.emit();\n  }\n}\n","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [style.backgroundColor]=\"getBackground()\">\n        <div class=\"row\">\n            <div class=\"col\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col\">\n                <a type=\"button\" (click)=\"onClose()\" >X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n</div>","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n\n  maxLimit = 1;\n  Queue = [];\n\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n  }\n\n\n  private appendComponentToContainer(header:string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    childComponentRef.instance.header = header;\n\n    childComponentRef.instance.message = message;\n\n    childComponentRef.instance.type = type;\n\n\n\n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef, type);\n    });\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n\n\n    // setTimeout(() => {\n    //   this.destroy(childComponentRef, type);\n    // }, 5000);\n  }\n\n  open(header, message, category) {\n    if (this.maxLimit <= 5) {\n      this.appendComponentToContainer(header, message + this.maxLimit, category);\n      this.maxLimit++;\n      console.log(this.maxLimit);\n    }\n    else {\n      this.Queue.push(message);\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>, type: string) {\n    this.elementService.destroyElement(childComponentRef);\n    if (this.maxLimit > 0) {\n      this.maxLimit--;\n      console.log(this.maxLimit);\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer('Header', this.Queue.shift() + ' ' + this.maxLimit + ' ' + this.Queue.length, type);\n      }\n    }\n  }\n\n\n\n\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n})\nexport class NotifyModule { }\n"]}