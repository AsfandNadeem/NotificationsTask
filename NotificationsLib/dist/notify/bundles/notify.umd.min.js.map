{"version":3,"sources":["../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["NotifyContainerComponent","prototype","ngOnInit","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","NotifyComponent","NotifyService","renderer","this","type","progressrequired","progressTime","actualTime","destroy","EventEmitter","setWidth","exists","ngAfterViewInit","_this","mySubscription","interval","subscribe","x","setProgress","getBackground","onClose","unsubscribe","emit","i0","ɵɵdirectiveInject","Renderer2","inputs","header","message","outputs","consts","i0.ɵɵtext","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵtextInterpolate","i0.ɵɵproperty","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","maxLimit","countNotifications","Queue","Array","_children","NotifyContainerRef","NotifyContainerElement","appendComponentToContainer","childComponentRef","childElement","instance","sub","push","setTimeout","open","category","splice","indexOf","length","shift","destroyAll","forEach","cmp","NotifyModule","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [style.backgroundColor]=\"getBackground()\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col-2\">\n                <a type=\"button\" (click)=\"onClose()\">X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\" style=\"text-align: center;\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n    <div *ngIf=\"progressrequired\" class=\"progress\">\n        <div #progressDiv [style.width.%]=\"setWidth\" class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n\n        </div>\n    </div>\n</div>","<ng-content></ng-content>","import { AfterViewInit, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { interval, Subscription } from 'rxjs';\nimport 'rxjs/add/observable/interval';\nimport { NotifyService } from './notify.service';\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit, AfterViewInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Input() progressrequired = false;\n  @Input() progressTime = 0;\n  @Input() actualTime = 0;\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n  mySubscription: Subscription;\n  // @ViewChild('progressDiv') divCurtain: ElementRef;\n  setWidth = 0;\n  exists = true;\n\n  // @HostBinding('class.redbackground') warning: boolean;\n  constructor(private NotifyService: NotifyService, public renderer: Renderer2) {\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    if (this.progressrequired) {\n      this.setWidth = ((this.actualTime / this.progressTime) * 100);\n      this.mySubscription = interval(100).subscribe((x => {\n        this.setProgress();\n      }));\n    }\n\n  }\n\n  getBackground(): string {\n    if (this.type === 'warning') {\n      return 'darkorange';\n    }\n    else if (this.type == 'error') {\n      return 'red'\n    }\n    else {\n      return 'blue';\n    }\n  }\n\n  onClose(): void {\n    if (this.progressrequired) {\n    this.mySubscription.unsubscribe();\n    }\n    this.destroy.emit();\n  }\n\n  setProgress() {\n    if (this.actualTime > 0) {\n      this.actualTime = this.actualTime - 100;\n      this.setWidth = ((this.actualTime / this.progressTime) * 100);\n      \n      // this.divCurtain.nativeElement.style.width = (this.actualTime / this.progressTime).toString() + '%';\n    }\n    else {\n      this.mySubscription.unsubscribe();\n    }\n  }\n}\n","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { INotification } from './notification.interface';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n  maxLimit = 5;\n  countNotifications = 0;\n  Queue = Array<INotification>();\n  private _children: ComponentRef<NotifyComponent>[] = [];\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n  }\n\n\n  private appendComponentToContainer(header: string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    childComponentRef.instance.header = header;\n\n    childComponentRef.instance.message = message;\n\n    childComponentRef.instance.type = type;\n\n    childComponentRef.instance.exists = true;\n\n\n\n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef);\n    });\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n    this._children.push(childComponentRef);\n    this.countNotifications++;\n\n    if (type == \"info\") {\n      childComponentRef.instance.exists = true;\n      childComponentRef.instance.progressrequired = true;\n      childComponentRef.instance.progressTime = 10000;\n      childComponentRef.instance.actualTime = 10000;      \n      setTimeout(() => {\n        if (childComponentRef.instance.exists) {\n          this.destroy(childComponentRef);\n        }\n      }, 10500);\n    }\n  }\n\n  open(header, message, category) {\n    if (this.countNotifications < this.maxLimit) {\n      this.appendComponentToContainer(header, message, category);\n    }\n    else {\n      this.Queue.push({ header: header, message: message, type: category });\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>) {\n    this.elementService.destroyElement(childComponentRef);\n    (this._children).splice((this._children).indexOf(childComponentRef), 1);\n    if (childComponentRef.instance.exists) {\n      childComponentRef.instance.exists = false;\n    }\n    if (this.countNotifications > 0) {\n      this.countNotifications--;\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer(this.Queue[0].header, this.Queue[0].message, this.Queue[0].type);\n        this.Queue.shift();\n      }\n    }\n  }\n\n\n  destroyAll() {\n    this._children.forEach(cmp => cmp.destroy());\n    this._children.splice(0, this._children.length);\n    this.countNotifications = 0;\n  }\n\n\n\n\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n})\nexport class NotifyModule { }\n"]}