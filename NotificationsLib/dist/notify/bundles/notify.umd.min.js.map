{"version":3,"sources":["../../../projects/notify/src/lib/notify-container/notify-container.component.ts","../../../projects/notify/src/lib/notify-container/notify-container.component.html","../../../projects/notify/src/lib/notify.component.ts","../../../projects/notify/src/lib/notify.component.html","../../../projects/notify/src/lib/elementAttachment.service.ts","../../../projects/notify/src/lib/notify.service.ts","../../../projects/notify/src/lib/notify.module.ts"],"names":["NotifyContainerComponent","prototype","ngOnInit","selectors","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","styleUrls","NotifyComponent","NotifyService","renderer","this","type","destroy","EventEmitter","getBackground","onClose","emit","i0","ɵɵdirectiveInject","Renderer2","inputs","header","message","outputs","consts","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","Input","Output","ElementAttachmentService","componentFactoryResolver","appRef","injector","createComponentinDom","component","componentRef","resolveComponentFactory","create","attachView","hostView","getElement","rootNodes","addChildtoElement","child","parent","document","body","appendChild","destroyElement","detachView","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn","Injectable","elementService","maxLimit","countNotifications","Queue","Array","_children","NotifyContainerRef","NotifyContainerElement","appendComponentToContainer","_this","childComponentRef","childElement","instance","sub","subscribe","unsubscribe","push","setTimeout","open","category","splice","indexOf","length","shift","destroyAll","forEach","cmp","NotifyModule","CommonModule","declarations","imports","exports","NgModule"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-notify-container',\n  templateUrl: './notify-container.component.html',\n  styleUrls: ['./notify-container.component.css']\n})\nexport class NotifyContainerComponent implements OnInit {\n\n  constructor() { }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<ng-content id=\"parent\"></ng-content>","import { HostBinding, Input } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { NotifyService } from './notify.service';\n@Component({\n  selector: 'lib-notify',\n  templateUrl: './notify.component.html',\n  styleUrls: ['./notify.component.css'\n  ]\n})\nexport class NotifyComponent implements OnInit {\n  @Input() header: string;\n  @Input() message: string;\n  @Input() type = '';\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n  \n  // @HostBinding('class.redbackground') warning: boolean;\n  constructor(private NotifyService: NotifyService,public renderer: Renderer2) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  getBackground(): string {\n    if (this.type === 'warning') {\n      return 'orange';\n    }\n    else if (this.type == 'error') {\n      return 'red'\n    }\n    else {\n      return 'blue';\n    }\n  }\n\n  onClose(): void {\n    this.destroy.emit();\n  }\n}\n","<div class=\"card container  my-4 stack-top\">\n    <div class=\"card-header container-fluid\" [style.backgroundColor]=\"getBackground()\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <h3>{{header}}</h3>\n            </div>\n            <div class=\"col-2\">\n                <a type=\"button\" (click)=\"onClose()\">X\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <p class=\"card-text\">{{message}}</p>\n    </div>\n</div>","import { EmbeddedViewRef } from '@angular/core';\nimport { ApplicationRef } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentFactoryResolver, Injectable } from '@angular/core'\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ElementAttachmentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector) {\n\n    }\n    // 1. Create a Cotntainer component reference from the component \n    createComponentinDom(component: any): ComponentRef<any> {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this.appRef.attachView(componentRef.hostView);\n        return componentRef;\n    }\n\n    // 3. Get DOM element from component\n    getElement(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    // 4. Append DOM element to the body\n    addChildtoElement(child: HTMLElement, parent: HTMLElement = document.body) {\n        parent.appendChild(child);\n    }\n\n    //5 Destroy Element\n    destroyElement(componentRef: ComponentRef<any>) {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}","import { ComponentRef } from '@angular/core';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\nimport { ElementAttachmentService } from './elementAttachment.service';\nimport { INotification } from './notification.interface';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\nimport { NotifyComponent } from './notify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifyService {\n  maxLimit = 5;\n  countNotifications = 0;\n  Queue = Array<INotification>();\n  private _children:ComponentRef<NotifyComponent>[] = [];\n  private NotifyContainerElement: HTMLElement;\n  private NotifyContainerRef: ComponentRef<NotifyContainerComponent>;\n\n  constructor(private elementService: ElementAttachmentService,\n    private appRef: ApplicationRef) {\n\n    this.NotifyContainerRef = this.elementService.createComponentinDom(NotifyContainerComponent);\n    this.NotifyContainerElement = this.elementService.getElement(this.NotifyContainerRef);\n    this.elementService.addChildtoElement(this.NotifyContainerElement);\n  }\n\n\n  private appendComponentToContainer(header: string, message: string, type: string) {\n    //Create Child Component\n    const childComponentRef = this.elementService.createComponentinDom(NotifyComponent);\n    //Get child Component\n    const childElement = this.elementService.getElement(childComponentRef);\n\n    childComponentRef.instance.header = header;\n\n    childComponentRef.instance.message = message;\n\n    childComponentRef.instance.type = type;\n\n\n    \n    const sub = childComponentRef.instance.destroy.subscribe(() => {\n      sub.unsubscribe();\n      this.destroy(childComponentRef);\n    });\n    //Add child component to parent\n    this.elementService.addChildtoElement(childElement, this.NotifyContainerElement);\n    this._children.push(childComponentRef);\n    this.countNotifications++;\n\n    if (type == \"info\") {\n      setTimeout(() => {\n        if(childComponentRef)\n        {this.destroy(childComponentRef);}\n      }, 10000);\n    }\n  }\n\n  open(header, message, category) {\n    if (this.countNotifications < this.maxLimit) {\n      this.appendComponentToContainer(header, message, category);\n    }\n    else {\n      this.Queue.push({header:header,message:message, type:category});\n    }\n  }\n\n  destroy(childComponentRef: ComponentRef<any>) {\n    this.elementService.destroyElement(childComponentRef);\n    (this._children).splice((this._children).indexOf(childComponentRef), 1);\n    if (this.countNotifications > 0) {\n      this.countNotifications--;\n      if (this.Queue.length >= 1) {\n        this.appendComponentToContainer(this.Queue[0].header, this.Queue[0].message, this.Queue[0].type);\n        this.Queue.shift();\n      }\n    }\n  }\n\n\n  destroyAll()\n  {\n    this._children.forEach(cmp=>cmp.destroy());\n    this._children.splice(0,this._children.length);\n  }\n\n\n\n\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyContainerComponent } from './notify-container/notify-container.component';\n\n\n\n@NgModule({\n  declarations: [NotifyComponent, NotifyContainerComponent],\n  imports: [CommonModule\n  ],\n  exports: [NotifyComponent]\n})\nexport class NotifyModule { }\n"]}